<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" initialize="init()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:Image id="cursorIcon" source="assets/icons/cursor/cursor.task.png"/>
	</fx:Declarations>
	<fx:Metadata>
		/**
		* 工作流流程设计面板
		* @company SysPeak (C) Copyright
		* @author JemiZhuu(周士淳)
		* @category FlowCanvas
		* @version 1.0
		* @since 2011-09-02
		*
		*/
	</fx:Metadata>
	<fx:Script source="asfile/flowCanvas.as" />
	<fx:Script>
		<![CDATA[
			import avmplus.getQualifiedClassName;
			
			import com.syspeak.makereap.flowdesigner.event.NodeDestroyEvent;
			import com.syspeak.makereap.flowdesigner.ini18.Ini18ResourceLoader;
			import com.syspeak.makereap.flowdesigner.model.node.INode;
			import com.syspeak.makereap.flowdesigner.model.node.Node;
			import com.syspeak.makereap.flowdesigner.model.node.connection.SequenceFlowNode;
			import com.syspeak.makereap.flowdesigner.model.node.event.StartEventNode;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			
			private static const msgDeleteNode:String = Ini18ResourceLoader.getAppString("delete.node");
			
			private function init():void {
				initDatas();
				this.addEventListener(MouseEvent.MOUSE_MOVE, handleMouseMove);
				this.addEventListener(MouseEvent.ROLL_OUT, handleMouseOut);
				this.addEventListener(MouseEvent.CLICK, handleMouseClick);				
			}
			
			private function initDatas():void {
				this._startNodes = new Vector.<StartEventNode>();
			}
			
			private function handleMouseClick(event:MouseEvent):void {
				if(_selectedNodeType!=null) {
					var targetObj:Object = event.target;
					var px:Number = event.localX;
					var py:Number = event.localY;
					notifyAddNode(targetObj, px, py);
				}
			}			
			
			private function handleMouseOut(event:MouseEvent):void {
				cursorManager.removeAllCursors();
				allowState=0;
			}
			
			private function handleMouseMove(event:MouseEvent):void {
				var targetObj:Object = event.target;
				if(_nodeCursor!=null) {
					notifyCursorChanged(targetObj);
				}
			}
			
			private function notifyAddNode(mouseObj:Object, px:Number, py:Number):void { 
				if(_selectedNodeType==SequenceFlowNode) {
				} else {
					if(allowState==1) {
						var nodeObj:Node = new _selectedNodeType();
						addNode(nodeObj, px, py); 
					}
				}
			}
			
			private function notifyCursorChanged(mouseObj:Object):void {
				if(_selectedNodeType==SequenceFlowNode) {
					if(allowState!=1 && mouseObj!=this) {
						allowState=1;
						cursorManager.removeCursor(cursorID);
						this.cursorID = cursorManager.setCursor(_nodeCursor);//更改鼠标图标
					} else if(allowState!=-1 && mouseObj==this) {
						allowState=-1;
						cursorManager.removeCursor(cursorID);
						this.cursorID = cursorManager.setCursor(_unAllowNodeCursor);
					}
				} else {
					if(allowState!=-1 && mouseObj!=this) {
						allowState=-1;
						cursorManager.removeCursor(cursorID);
						this.cursorID = cursorManager.setCursor(_unAllowNodeCursor);
					} else if(allowState!=1 && mouseObj==this) {
						allowState=1;
						cursorManager.removeCursor(cursorID);
						this.cursorID = cursorManager.setCursor(_nodeCursor);//更改鼠标图标
					}
				}
			}
			
			public function addNode(node:INode, px:int, py:int):void {				
				if(!node.canAdd(this)) {
					Alert.show("Can`t add this Node");
					return;
				}
				var component:BaseNodeComponent = node.getComponent();
				if(component==null) {
					return;
				}
				addElement(component);
				component.addEventListener(BaseNodeComponent.DESTROY, handleNodeDestroy);
				component.move(px, py);				
				var nodeType:String = getQualifiedClassName(node);
				switch(nodeType) {
					case getQualifiedClassName(StartEventNode): {
						_startNodes.push(node);
					}
						break;
				}
			}		
			
			public function handleNodeDestroy(event:NodeDestroyEvent):void {
				var node:INode = event.node;
				Alert.show(node.nodeName, msgDeleteNode, Alert.YES|Alert.NO, this, function(event:CloseEvent):void {
					if(event.detail==Alert.YES) {
						removeNode(node);
					}
				});				
			}			
			
			public function removeNode(node:INode):void {
				var component:BaseNodeComponent = node.getComponent();
				node.destroy();				
				var nodeType:String = getQualifiedClassName(node);
				switch(nodeType) {
					case getQualifiedClassName(StartEventNode): {
						var index:int = _startNodes.indexOf(node);
						if(index!=-1) {
							_startNodes.splice(index, 1);
						}
					}
						break;
				}				
			}
			
			public function addFlowNode(flowNode:SequenceFlowNode):void {
				var flowComponent:BaseNodeComponent = flowNode.getComponent();
				addElement(flowComponent);
				flowComponent.addEventListener(NodeDestroyEvent.DESTROY, handleNodeDestroy);
			}
									
			private var _startNodes:Vector.<StartEventNode>;
			private var _selectedNodeType:Class;
			private var _nodeCursor:Class;
			private var _unAllowNodeCursor:Class;
			private var cursorID:Number;
			private var allowState:int;
			
			public function set selectedNodeType(nodeType:Class):void {
				this._selectedNodeType = nodeType;				
				this._nodeCursor = Node.getCursor(_selectedNodeType);
				this._unAllowNodeCursor = Node.getUnAllowCursor(_selectedNodeType);
			}
			
			public function get startNodes():Vector.<StartEventNode> {
				return this._startNodes;
			}
			
		]]>		
	</fx:Script>	
</s:Group>
